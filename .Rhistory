b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 0.5
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 0.25
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 0.125
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 0.125
b = 10
n = 10000
data = norm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 0.125
b = 10
n = 10000
data = norm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = norm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = norm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = norm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = rnorm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
x = (data[1:i] - mean(data[1:i]))
est_var = mean(x)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = rnorm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
lines(lower_q, col = "red")
head(lower_q)
a = 5
b = 10
n = 10000
data = rnorm(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 5
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 1
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 30
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 60
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 100
b = 10
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 100
b = 0
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
a = 100
b = 1
n = 10000
data = rpareto(n,a,b)
sim_exp = rep(0,n)
lower_q = rep(0,n)
upper_q = rep(0,n)
for(i in 1:n)
{
sim_exp[i] = mean(data[1:i])
dev = (data[1:i] - mean(data[1:i]))
est_var = mean(dev)
lower_q[i] = sim_exp[i] - 1.96 * sqrt(est_var/i)
upper_q[i] = sim_exp[i] + 1.96 * sqrt(est_var/i)
}
par(mfrow = c(1,1))
plot(sim_exp, type = "l")
lines(lower_q, col = "red")
lines(upper_q, col = "blue")
plot(rnorm(1000, 0,1))
plot(rpareto(1000,1,1))
plot(rpareto(1000,100,1))
plot(rpareto(1000,1000,1))
plot(dpareto(1000,1000,1))
plot(dnorm(1000, 0,1))
plot(1:1000,dnorm(1000, 0,1))
plot(1:1000,rnorm(1000, 0,1))
df = read.csv(unz('activity.zip','activity.csv'))
df = read.csv(unzip('activity.zip','activity.csv'))
unzip('activity.zip','activity.csv')
unzip('activity.zip', list = TRUE)
unzip('activity.zip', list = TRUE)
install.package('readr')
getwd()
setwd("~/R/Coursera/Data Science Specialization/RepData_PeerAssessment1")
unzip('activity.zip','activity.csv')
df = read.csv(unzip('activity.zip','activity.csv'))
head(df)
install.packages('tidyverse')
library(tidyverse)
head(df)
df.steps %>% hist()
df %>% group_by(date) %>% summarize(daily_steps = steps)
df %>% group_by(date) %>% summarize(daily_steps = sum(steps))
df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% mean(daily_steps, na.rm = TRUE)
df = read.csv(unzip('activity.zip','activity.csv'))
mean_daily_steps = df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% mean(daily_steps, na.rm = TRUE)
mean_daily_steps
daily_df = df %>% group_by(date) %>% summarize(daily_steps = sum(steps))
head(daily_df)
mean(daily_df$daily_steps, na.rm = TRUE)
mean_daily_steps = df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% summarize(mean(daily_steps, na.rm = TRUE))
mean_daily_steps
head(df)
df %>% plot(interval, steps)
plot(df$interval, df$steps, type = 'l')
step_moments = df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% summarize(mean_daily_steps = mean(daily_steps, na.rm = TRUE), median_daily_steps = median(daily_steps, na.rm = TRUE))
step_moments
df$steps %>% hist()
df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% hist(daily_steps)
df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% hist()
df %>% group_by(date) %>% summarize(daily_steps = sum(steps)) %>% hist(.)
df_daily = df %>% group_by(date) %>% summarize(daily_steps = sum(steps))
df_daily
hist(df_daily$daily_steps)
hist(df_daily$daily_steps, main "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency")
hist(df_daily$daily_steps, main "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency")
hist(df_daily$daily_steps, main = "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency")
hist(df_daily$daily_steps, main = "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency", bins = 20)
hist(df_daily$daily_steps, main = "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency", breaks = 20)
hist(df_daily$daily_steps, main = "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency", breaks = 10)
df_interval df %>% group_by(interval) %>% summarize(mean_steps = mean(steps, na.rm = TRUE))
df_interval = df %>% group_by(interval) %>% summarize(mean_steps = mean(steps, na.rm = TRUE))
plot(df_interval$interval, df_interval$mean_steps, type = 'l')
plot(df_interval$interval, df_interval$mean_steps, type = 'l', main = "Average number of steps by interval", xlab = "Interval", ylab = "Average number of steps")
df_interval %>% summarize(max(avg_steps))
df_interval %>% summarize(max(mean_steps))
df_interval[which.max(df_interval$mean_steps), ]$interval
sum(is.na(df$steps))
df_imputed = df_interval$mean_steps[match(df$interval, df_interval$interval)]
head(df_imputed)
head(df)
len(df_imputed)
df_imputed
dim(df_imputed)
match(df$interval, df_interval$interval)
imputations = df_interval$mean_steps[match(df$interval, df_interval$interval)]
df_imputed = transform(df, steps = ifelse(is.na(df$steps), yes = imputations, no = df$steps))
head(df_imputed)
install.packages('tidyverse')
library(tidyverse)
df = read.csv(unz('activity.zip','activity.csv'))
install.packages('tidyverse')
library(tidyverse)
df = read.csv(unz('activity.zip','activity.csv'))
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
df = read.csv(unz('activity.zip','activity.csv'))
df_daily = df %>% group_by(date) %>% summarize(daily_steps = sum(steps))
hist(df_daily$daily_steps, main = "Total Daily Steps", xlab = "Total daily steps", ylab = "Frequency", breaks = 10)
step_moments = df_daily %>% summarize(mean_daily_steps = mean(daily_steps, na.rm = TRUE), median_daily_steps = median(daily_steps, na.rm = TRUE))
step_moments = df_daily %>% summarize(mean_daily_steps = mean(daily_steps, na.rm = TRUE), median_daily_steps = median(daily_steps, na.rm = TRUE))
step_moments
step_moments = df_daily %>% summarize(mean_daily_steps = mean(daily_steps, na.rm = TRUE), median_daily_steps = median(daily_steps, na.rm = TRUE))
step_moments
df_interval = df %>% group_by(interval) %>% summarize(mean_steps = mean(steps, na.rm = TRUE))
plot(df_interval$interval, df_interval$mean_steps, type = 'l', main = "Average number of steps by interval", xlab = "Interval", ylab = "Average number of steps")
df_interval[which.max(df_interval$mean_steps), ]$interval
df_imputed$date <- as.Date(strptime(df_imputed$date, format="%Y-%m-%d"))
df_imputed$datetype <- sapply(df_imputed$date, function(x) {
if (weekdays(x) == "Saturday" | weekdays(x) =="Sunday")
{y <- "Weekend"} else
{y <- "Weekday"}
y
})
df_daily = df_imputed %>% group_by(date) %>% summarize(mean_steps = mean(steps))
plot<- ggplot(df_daily, aes(x = interval , y = mean_steps, color = day)) +
geom_line() +
labs(title = "Average daily steps by day category", x = "Interval", y = "Average number of steps") +
facet_wrap(~day, ncol = 1, nrow=2)
print(plot)
df_imputed$date <- as.Date(strptime(df_imputed$date, format="%Y-%m-%d"))
df_imputed$day <- sapply(df_imputed$date, function(x) {
if (weekdays(x) == "Saturday" | weekdays(x) =="Sunday")
{y <- "Weekend"} else
{y <- "Weekday"}
y
})
df_daily = df_imputed %>% group_by(date) %>% summarize(mean_steps = mean(steps))
plot<- ggplot(df_daily, aes(x = interval , y = mean_steps, color = day)) +
geom_line() +
labs(title = "Average daily steps by day category", x = "Interval", y = "Average number of steps") +
facet_wrap(~day, ncol = 1, nrow=2)
print(plot)
df_imputed$date = as.Date(strptime(df_imputed$date, format="%Y-%m-%d"))
df_imputed$day = sapply(df_imputed$date, function(x) {
if (weekdays(x) == "Saturday" | weekdays(x) =="Sunday")
{y = "Weekend"}
else
{y = "Weekday"}
y
})
df_daily = df_imputed %>% group_by(date) %>% summarize(mean_steps = mean(steps))
plot = ggplot(df_daily, aes(x = interval, y = mean_steps, color = day)) +
geom_line() +
labs(title = "Average daily steps by day category", x = "Interval", y = "Average number of steps") +
facet_wrap( ~ day, ncol = 1, nrow = 2)
print(plot)
